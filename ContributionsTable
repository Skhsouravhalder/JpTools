<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Category Edits Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
            margin: 0;
        }
        #content {
            text-align: center;
            width: 100%;
            max-width: 800px;
        }
        #chartContainer {
            max-width: 400px; /* Adjust max width as needed */
            margin: 0 auto; /* Center align horizontally */
            padding: 20px;
            border: 1px solid #ccc;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ccc;
        }
        th, td {
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <div id="content">
        <h1>Category Edits Analysis</h1>
        <form id="searchForm">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
            <label for="categories">Categories (comma-separated):</label>
            <input type="text" id="categories" name="categories" required>
            <button type="submit">Search</button>
        </form>
        <div id="summary"></div>
        <div id="chartContainer">
            <canvas id="categoryChart"></canvas>
        </div>
        <div id="contributions"></div>
        <div id="error" style="color: red;"></div>
    </div>

    <script>
        document.getElementById('searchForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const username = document.getElementById('username').value;
            const categories = document.getElementById('categories').value.split(',').map(cat => cat.trim());
            try {
                await init(username, categories);
            } catch (error) {
                document.getElementById('error').textContent = 'An error occurred: ' + error.message;
                console.error(error);
            }
        });

        async function fetchContributions(username) {
            try {
                const response = await fetch(`https://justapedia.org/api.php?action=query&list=usercontribs&ucuser=${username}&uclimit=max&format=json&origin=*`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Contributions:', data);
                return data.query.usercontribs;
            } catch (error) {
                throw new Error('Failed to fetch contributions: ' + error.message);
            }
        }

        async function fetchCategoryPages(category) {
            try {
                const response = await fetch(`https://justapedia.org/api.php?action=query&list=categorymembers&cmtitle=Category:${category}&cmlimit=max&format=json&origin=*`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log(`Pages in category ${category}:`, data);
                return data.query.categorymembers.map(page => page.title);
            } catch (error) {
                throw new Error('Failed to fetch category pages for ' + category + ': ' + error.message);
            }
        }

        async function analyzeContributions(username, categories) {
            const contributions = await fetchContributions(username);
            const categoryPages = {};

            for (const category of categories) {
                categoryPages[category] = await fetchCategoryPages(category);
            }

            let editsInCategories = 0;
            let editsNotInCategories = 0;
            const contributionsList = [];

            for (const contribution of contributions) {
                let foundInCategory = false;
                for (const category of categories) {
                    if (categoryPages[category].includes(contribution.title)) {
                        foundInCategory = true;
                        break;
                    }
                }
                if (foundInCategory) {
                    editsInCategories++;
                } else {
                    editsNotInCategories++;
                }

                contributionsList.push({
                    title: contribution.title,
                    date: contribution.timestamp,
                    diffLink: `https://justapedia.org/w/index.php?title=${encodeURIComponent(contribution.title)}&diff=${contribution.revid}`,
                    historyLink: `https://justapedia.org/w/index.php?title=${encodeURIComponent(contribution.title)}&action=history`,
                    topEditsLink: `https://justapedia.org/w/index.php?title=${encodeURIComponent(contribution.title)}&action=topedits`,
                    size: contribution.newlen,
                    summary: contribution.comment
                });
            }

            return {
                editsInCategories,
                editsNotInCategories,
                contributionsList
            };
        }

        function generateSummary(data) {
            const { editsInCategories, editsNotInCategories } = data;
            let summary = `<p>Edits in categories: ${editsInCategories}</p>`;
            summary += `<p>Edits not in categories: ${editsNotInCategories}</p>`;
            document.getElementById('summary').innerHTML = summary;
        }

        function generateChart(data) {
            const { editsInCategories, editsNotInCategories } = data;

            new Chart(document.getElementById('categoryChart'), {
                type: 'pie',
                data: {
                    labels: ['Edits in categories', 'Edits not in categories'],
                    datasets: [{
                        label: 'Edits',
                        data: [editsInCategories, editsNotInCategories],
                        backgroundColor: ['#ff6384', '#36a2eb']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false, // Ensure chart fits within specified dimensions
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                    },
                    layout: {
                        padding: {
                            top: 10,
                            bottom: 10,
                            left: 10,
                            right: 10
                        }
                    }
                }
            });
        }

        function generateContributionsTable(contributionsList) {
            let table = `
                <table>
                    <thead>
                        <tr>
                            <th>Page Title</th>
                            <th>Date</th>
                            <th>Links</th>
                            <th>Size</th>
                            <th>Edit Summary</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            for (const contribution of contributionsList) {
                table += `
                    <tr>
                        <td>${contribution.title}</td>
                        <td>${new Date(contribution.date).toLocaleString()}</td>
                        <td>
                            <a href="${contribution.diffLink}" target="_blank">Diff</a> |
                            <a href="${contribution.historyLink}" target="_blank">History</a> |
                            <a href="${contribution.topEditsLink}" target="_blank">Top Edits</a>
                        </td>
                        <td>${contribution.size}</td>
                        <td>${contribution.summary}</td>
                    </tr>
                `;
            }

            table += `
                    </tbody>
                </table>
            `;

            document.getElementById('contributions').innerHTML = table;
        }

        async function init(username, categories) {
            const data = await analyzeContributions(username, categories);
            generateSummary(data);
            generateChart(data);
            generateContributionsTable(data.contributionsList);
        }
    </script>
</body>
</html>
