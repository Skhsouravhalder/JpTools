<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Category Edits Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: #ffffff;
            border-bottom: 1px solid #ddd;
        }
        .header .logo {
            font-size: 24px;
            font-weight: bold;
        }
        .header .logo span {
            color: #1ea1f2;
        }
        .header nav a {
            margin: 0 10px;
            text-decoration: none;
            color: #333;
        }
        .header nav a:hover {
            color: #1ea1f2;
        }
        .header .get-started {
            background-color: #1ea1f2;
            color: #fff;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
        }
        .header .get-started:hover {
            background-color: #0d8cd2;
        }
        #chartContainer {
            max-width: 400px; /* Adjust max width as needed */
            margin: 0 auto; /* Center align horizontally */
            padding: 20px;
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">JpTools<span>.</span></div>
        <nav>
            <a href="#">Home</a>
            <a href="#">About</a>
            <a href="#">tools</a>
            <a href="#">Copyrights</a>
            <a href="#">Terms of use</a>
            <a href="#">disclaimer</a>
            <a href="#">justapedia</a>
            <a href="#">Contact</a>
        </nav>
        <a href="#" class="get-started">Get Started</a>
    </div>
    <h1>Category Edits Analysis</h1>
    <form id="searchForm">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>
        <label for="categories">Categories (comma-separated):</label>
        <input type="text" id="categories" name="categories" required>
        <button type="submit">Search</button>
    </form>
    <div id="summary"></div>
    <div id="chartContainer">
        <canvas id="categoryChart"></canvas>
    </div>
    <div id="error" style="color: red;"></div>
    <div id="userUrl"></div>
    <div id="currentPageUrl"></div>

    <script>
        document.getElementById('searchForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const username = document.getElementById('username').value;
            const categories = document.getElementById('categories').value.split(',').map(cat => cat.trim());
            try {
                await init(username, categories);
                updateURL(username, categories);
                displayUserUrl(username);
                displayCurrentPageUrl();
            } catch (error) {
                document.getElementById('error').textContent = 'An error occurred: ' + error.message;
                console.error(error);
            }
        });

        function updateURL(username, categories) {
            const newUrl = `${window.location.origin}${window.location.pathname}?username=${encodeURIComponent(username)}&categories=${encodeURIComponent(categories.join(','))}`;
            window.history.pushState({ path: newUrl }, '', newUrl);
        }

        function getQueryParams() {
            const params = new URLSearchParams(window.location.search);
            return {
                username: params.get('username'),
                categories: params.get('categories') ? params.get('categories').split(',') : []
            };
        }

        async function fetchContributions(username) {
            try {
                const response = await fetch(`https://justapedia.org/api.php?action=query&list=usercontribs&ucuser=${username}&uclimit=max&format=json&origin=*`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Contributions:', data);
                return data.query.usercontribs;
            } catch (error) {
                throw new Error('Failed to fetch contributions: ' + error.message);
            }
        }

        async function fetchCategoryPages(category) {
            try {
                const response = await fetch(`https://justapedia.org/api.php?action=query&list=categorymembers&cmtitle=Category:${category}&cmlimit=max&format=json&origin=*`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log(`Pages in category ${category}:`, data);
                return data.query.categorymembers.map(page => page.title);
            } catch (error) {
                throw new Error('Failed to fetch category pages for ' + category + ': ' + error.message);
            }
        }

        async function analyzeContributions(username, categories) {
            const contributions = await fetchContributions(username);
            const categoryPages = {};

            for (const category of categories) {
                categoryPages[category] = await fetchCategoryPages(category);
            }

            let editsInCategories = 0;
            let editsNotInCategories = 0;

            for (const contribution of contributions) {
                let foundInCategory = false;
                for (const category of categories) {
                    if (categoryPages[category].includes(contribution.title)) {
                        foundInCategory = true;
                        break;
                    }
                }
                if (foundInCategory) {
                    editsInCategories++;
                } else {
                    editsNotInCategories++;
                }
            }

            return {
                editsInCategories,
                editsNotInCategories
            };
        }

        function generateSummary(data) {
            const { editsInCategories, editsNotInCategories } = data;
            let summary = `<p>Edits in categories: ${editsInCategories}</p>`;
            summary += `<p>Edits not in categories: ${editsNotInCategories}</p>`;
            document.getElementById('summary').innerHTML = summary;
        }

        function generateChart(data) {
            const { editsInCategories, editsNotInCategories } = data;

            new Chart(document.getElementById('categoryChart'), {
                type: 'pie',
                data: {
                    labels: ['Edits in categories', 'Edits not in categories'],
                    datasets: [{
                        label: 'Edits',
                        data: [editsInCategories, editsNotInCategories],
                        backgroundColor: ['#ff6384', '#36a2eb']
                    }]
                },
                options: {
                    responsive: true,
                }
            });
        }

        function displayUserUrl(username) {
            const userUrl = `https://justapedia.org/wiki/User:${username}`;
            document.getElementById('userUrl').innerHTML = `<p>User URL: <a href="${userUrl}" target="_blank">${userUrl}</a></p>`;
        }

        function displayCurrentPageUrl() {
            const currentPageUrl = window.location.href;
            document.getElementById('currentPageUrl').innerHTML = `<p>Current Page URL: <a href="${currentPageUrl}" target="_blank">${currentPageUrl}</a></p>`;
        }

        async function init(username, categories) {
            const data = await analyzeContributions(username, categories);
            generateSummary(data);
            generateChart(data);
        }

        window.addEventListener('DOMContentLoaded', async (event) => {
            const { username, categories } = getQueryParams();
            if (username) {
                document.getElementById('username').value = username;
                document.getElementById('categories').value = categories.join(', ');
                await init(username, categories);
                displayUserUrl(username);
                displayCurrentPageUrl();
            }
        });
    </script>
</body>
</html>
