<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Category Edits Analysis</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        #content {
            width: 100%;
            max-width: 800px;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            text-align: center;
        }
        p, form {
            text-align: center;
            margin-bottom: 20px;
        }
        form {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        label {
            margin-right: 10px;
        }
        input[type="text"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 0.9em;
        }
        button {
            padding: 8px 20px;
            border: none;
            background-color: #007bff;
            color: #fff;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
        }
        button:hover {
            background-color: #0056b3;
        }
        table {
            width: 500%;
            border-collapse: collapse;
            margin-top: 1500px;
            font-size: 0.9em;
        }
        table, th, td {
            border: 1px solid #ccc;
        }
        th, td {
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        #pagination {
            margin-top: 10px;
            text-align: center;
        }
        .page-link {
            cursor: pointer;
            padding: 5px 10px;
            margin: 0 5px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
        }
        .load-more:hover {
            background-color: #e0e0e0;
        }
        #error {
            color: red;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div id="content">
        <h1>Category Edits Analysis</h1>
        <p>This page analyzes a user's contributions to Wikipedia-like categories.</p>
        <form id="searchForm">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
            <button type="submit">Search</button>
        </form>
        <div id="summary"></div>
        <h2>Detailed Contributions</h2>
        <div id="contributions"></div>
        <div id="pagination"></div>
        <div id="error" style="color: red;"></div>
    </div>

    <script>
        document.getElementById('searchForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const username = document.getElementById('username').value;
            const categories = []; // Empty array since categories are no longer input by user
            try {
                await init(username, categories);
            } catch (error) {
                document.getElementById('error').textContent = 'An error occurred: ' + error.message;
                console.error(error);
            }
        });

        async function fetchContributions(username) {
            try {
                const response = await fetch(`https://justapedia.org/api.php?action=query&list=usercontribs&ucuser=${username}&uclimit=max&format=json&origin=*`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Contributions:', data);
                return data.query.usercontribs;
            } catch (error) {
                throw new Error('Failed to fetch contributions: ' + error.message);
            }
        }

        async function analyzeContributions(username, categories) {
            const contributions = await fetchContributions(username);
            let editsInCategories = 0;
            let editsNotInCategories = 0;
            const contributionsList = [];

            for (const contribution of contributions) {
                // Since categories are no longer used, all contributions are treated as in-category
                editsInCategories++;

                contributionsList.push({
                    title: contribution.title,
                    date: contribution.timestamp,
                    diffLink: `https://justapedia.org/w/index.php?title=${encodeURIComponent(contribution.title)}&diff=${contribution.revid}`,
                    historyLink: `https://justapedia.org/w/index.php?title=${encodeURIComponent(contribution.title)}&action=history`,
                    topEditsLink: `https://justapedia.org/w/index.php?title=${encodeURIComponent(contribution.title)}&action=topedits`,
                    size: contribution.newlen,
                    summary: contribution.comment
                });
            }

            return {
                editsInCategories,
                editsNotInCategories,
                contributionsList
            };
        }

        function generateSummary(data) {
            const { editsInCategories } = data;
            let summary = `<p>Total edits analyzed: ${editsInCategories}</p>`;
            document.getElementById('summary').innerHTML = summary;
        }

        function generateContributionsTable(contributionsList, page = 1) {
            const contributionsPerPage = 50;
            const start = (page - 1) * contributionsPerPage;
            const end = start + contributionsPerPage;
            const paginatedContributions = contributionsList.slice(start, end);

            let table = `
                <table>
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Links (Diff, History, Top Edits)</th>
                            <th>Size</th>
                            <th>Edit Summary</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            for (const contribution of paginatedContributions) {
                table += `
                    <tr>
                        <td>${contribution.title}</td>
                        <td>${new Date(contribution.date).toLocaleString()}</td>
                        <td>
                            <a href="${contribution.diffLink}" target="_blank">Diff</a> |
                            <a href="${contribution.historyLink}" target="_blank">History</a> |
                            <a href="${contribution.topEditsLink}" target="_blank">Top Edits</a>
                        </td>
                        <td>${contribution.size}</td>
                        <td>${contribution.summary}</td>
                    </tr>
                `;
            }

            table += `
                    </tbody>
                </table>
            `;

            document.getElementById('contributions').innerHTML = table;
            generatePagination(contributionsList.length, contributionsPerPage, page);
        }

        function generatePagination(totalContributions, contributionsPerPage, currentPage) {
            const totalPages = Math.ceil(totalContributions / contributionsPerPage);
            let pagination = '';

            for (let i = 1; i <= totalPages; i++) {
                pagination += `<span class="page-link ${i === currentPage ? 'active' : ''}" data-page="${i}">${i}</span>`;
            }

            document.getElementById('pagination').innerHTML = pagination;

            document.querySelectorAll('.page-link').forEach(link => {
                link.addEventListener('click', function() {
                    const page = parseInt(this.getAttribute('data-page'));
                    generateContributionsTable(window.contributionsList, page);
                });
            });
        }

        async function init(username, categories) {
            const data = await analyzeContributions(username, categories);
            window.contributionsList = data.contributionsList;
            generateSummary(data);
            generateContributionsTable(window.contributionsList);
        }
    </script>
</body>
</html>
